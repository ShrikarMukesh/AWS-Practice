=======================
Module 19 - Containers - Part 1
=======================

Part 1:
---------
1) Containers Overview

Part 2:
---------
2) Amazon ECR
3) Running Containers 
4) Amazon ECS

Part 3:
---------
5) Amazon EKS
6) AWS Fargate

Part 4:
---------
7) Containers -  Exam Tips
Exam #18 - Containers

===================
1) Containers Overview
===================
=> Container is standard Unit of Software that packages code and all of its dependencies.
=> SO that Applications can run inside the container very quickly and reliably from One environment from another.

1.1) Understand the History:
---------------------------------------
a) Physical Servers
b) Virtulization
c) Containerization

1.2) Docker Introduction:
-----------------------------------
=> Docker is a software development platform to deploy applications
=> Applications are packaged as containers.
=> Containers are more flexible to manage
=> Containers run the same way , regardless of where they are running
	* Any Machine
	* Any OS
	* Any Language
	* Less Work
	* Easier to maintain and deploy
	* No Compatibility issues.

=> Dev is Prod and Prod is Dev  - This is the good thing with Containers.
 
=> Best use-case : MicroService Architecture.

Steps:
---------------
1) Write the Docker File
2) Build Docker Image
3) Push the docker image to Docker Registry
4) Pull the docker image from Docker Registry
5) Create the Docker Container which runs your application.

Key Docker Terminology:
----------------------------------
a) DockerFile
b) Docker Image
c) Docker Container
d) Docker Registry

a) DockerFile:
---------------------
=> Docker file is Text Document which contains all the commands or Instructions to build image.

Ex:
mydockerFile1
--------------------
FROM openjdk:8
ADD myjlcapp-boot.jar myjlcapp-boot.jar
EXPOSE 12345
ENTRYPOINT ["java","-jar","myjlcapp-boot.jar"]

mydockerFile2
--------------------
FROM tomcat:8.5.0
LABEL maintainer sri@jlcindia.com
COPY myjlcapp.war /usr/local/tomcat/webapps/
EXPOSE 8080
CMD /usr/local/tomcat/bin/catalina.sh run

b) Docker Image:
------------------------
=> Docker Image is a immutable file that contains Code, Libraries, Dependencies and Configuration files required to run the application.

Ex:
docker images

c) Docker Container:
---------------------------
=> Running Copy of the Image that has been created is called as Container.
=> You can create one or more containers for an Image.

Ex:
docker ps
docker ps -a

docker run --name myhello-c1 -d hello-world
docker run --name myhello-c2 -d hello-world

docker run --name myjlc-c1 -d dandesclasses/jlc-hello-world
docker run --name myjlc-c2 -d dandesclasses/jlc-hello-world

docker run --name mynginx-c1 -d -p 8080:80 nginx
docker run --name mynginx-c2 -d -p 8090:80 nginx

docker run --name myjlcapp-c2 -d -p 12345:54321 dandesclasses/myjlcapp-boot:v1.0
docker run --name myjlcapp-c3 -d -p 54321:54321 dandesclasses/myjlcapp-boot:v1.0

docker ps -a
docker ps

d) Docker Registry:
--------------------------
=> Docker images are stored in the Docker Registry for distribution/sharing.

1) Docker Hub:
-------------------
=> Contains both private and public registry
=> You can find base images for many technologies

2) Amazon ECR ( Elastic Container Registry)***
3) Google Container Registry
4) Azure Container Registry
etc

1.3) Kubernetes Introduction:
---------------------------------------
=> Kubernetes is an open source container orchestration engine for 
	automating deployment, 
	scaling, 
	management of containerized applications. 
=> This open source project is hosted by the Cloud Native Computing Foundation (CNCF).



1.4) Docker Container Management on AWS:
----------------------------------------------------------
a) Amazon ECR
b) Amazon ECS
c) Amazon EKS
d) AWS Fargate

a) Amazon ECR:
---------------------
=> ECR - Elastic Container Registry
=> Stores Container Images

b) Amazon ECS:
---------------------
=> ECS - Elastic Container Service
=> Amazon's own Container Management Platform

c) Amazon EKS:
---------------------
=> EKS - Elastic Kubernetes Service
=> Amazon's Managed Platform for Open Source Kubernetes

d) AWS Fargate:
---------------------
=> Amazon's own Serverless Container Platform
=> Works with ECS and EKS



